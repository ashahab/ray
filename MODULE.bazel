###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################

module(name = "com_github_ray_project_ray")

register_execution_platforms(
    "@local_config_platform//:host",
    "//:hermetic_python_platform",
)

bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "zlib", version = "1.3.1.bcr.5")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "flatbuffers", version = "25.2.10", repo_name = "com_github_google_flatbuffers")
bazel_dep(name = "grpc", version = "1.72.0", repo_name = "com_github_grpc_grpc")
single_version_override(
    module_name = "grpc",
    patches = [
        "//:thirdparty/patches/grpc-cython-copts.1.72.0.patch",
        "//:thirdparty/patches/grpc-zlib-fdopen.1.72.0.patch"
    ],
)
bazel_dep(name = "grpc-java", version = "1.71.0")

bazel_dep(name = "jemalloc", version = "5.3.0-bcr.alpha.4")
bazel_dep(name = "boringssl", version = "0.20250415.0")
bazel_dep(name = "abseil-cpp", version = "20250127.1", repo_name = "com_google_absl")
bazel_dep(name = "opentelemetry-cpp", version = "1.19.0", repo_name = "io_opentelemetry_cpp")
bazel_dep(name = "bazel_jar_jar", version = "0.1.7", repo_name = "com_github_johnynek_bazel_jar_jar")
bazel_dep(name = "rules_proto", version = "7.1.0")
bazel_dep(name = "rules_go", version = "0.54.0", repo_name = "io_bazel_rules_go")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "rules_proto_grpc", version = "5.0.1")
bazel_dep(name = "rules_proto_grpc_python", version = "5.0.1")
bazel_dep(name = "rules_jvm_external", version = "6.7")
bazel_dep(name = "spdlog", version = "1.15.2", repo_name = "com_github_spdlog")
bazel_dep(name = "google_bazel_common", version = "0.0.1", repo_name = "bazel_common")
bazel_dep(name = "rules_graalvm", version = "0.11.1")

bazel_dep(name = "opencensus-cpp", version = "0.0.0-20230502-50eb5de.bcr.1", repo_name = "io_opencensus_cpp")
single_version_override(
    module_name = "opencensus-cpp",
    patches = [
        "//:thirdparty/patches/opencensus-cpp-harvest-interval.0.0.0-20230502.patch",
        "//:thirdparty/patches/opencensus-cpp-shutdown-api.0.0.0-20230502.patch",
    ],
)
bazel_dep(name = "opencensus-proto", version = "0.4.1.bcr.2", repo_name = "io_opencensus_proto")

# Hedron's Compile Commands Extractor for Bazel
# https://github.com/hedronvision/bazel-compile-commands-extractor
bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "0e990032f3c5a866e72615cf67e5ce22186dcb97",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

bazel_dep(name = "rules_ios", version = "5.6.0", repo_name = "build_bazel_rules_ios")
bazel_dep(name = "rules_apple", version = "3.21.0", repo_name = "build_bazel_rules_apple")
bazel_dep(name = "rules_swift", version = "2.8.2", repo_name = "build_bazel_rules_swift")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")
bazel_dep(name = "rules_perl", version = "0.4.1")
bazel_dep(name = "apple_support", version = "1.22.0", repo_name = "build_bazel_apple_support")
single_version_override(
    module_name = "apple_support",
    patches = [
        "//:thirdparty/patches/apple-support-skip-lrt.1.22.0.patch",
    ],
)
bazel_dep(name = "openssl", version = "3.3.1.bcr.1")
single_version_override(
    module_name = "openssl",
    patches = [
        "//:thirdparty/patches/openssl.patch",
    ],
)
bazel_dep(name = "googletest", version = "1.17.0", repo_name = "com_google_googletest")
bazel_dep(name = "gflags", version = "2.2.2", repo_name = "com_github_gflags_gflags")
bazel_dep(name = "xz", version = "5.4.5.bcr.5")
single_version_override(
    module_name = "xz",
    patches = [
        "//:thirdparty/patches/xz-arm64e.5.4.5.bcr.5.patch",
    ],
)
bazel_dep(name = "msgpack-c", version = "6.1.0", repo_name = "msgpack")
bazel_dep(name = "protobuf", version = "30.2", repo_name = "com_google_protobuf")
bazel_dep(name = "rapidjson", version = "1.1.0.bcr.20241007")

bazel_dep(name = "prometheus-cpp", version = "1.3.0.bcr.1", repo_name = "com_github_jupp0r_prometheus_cpp")
single_version_override(
    module_name = "prometheus-cpp",
    patches = [
        "//:thirdparty/patches/prometheus-zlib-fdopen.1.2.13.patch",
    ],
)

# Boost
# Famous C++ library that has given rise to many new additions to the C++ Standard Library
# Makes @boost available for use: For example, add `@boost//:algorithm` to your deps.
# For more, see https://github.com/nelhage/rules_boost and https://www.boost.org
bazel_dep(name = "rules_boost", repo_name = "com_github_nelhage_rules_boost")
archive_override(
    module_name = "rules_boost",
    url = "https://github.com/nelhage/rules_boost/archive/refs/heads/master.tar.gz",
    strip_prefix = "rules_boost-master",
    patches = [
        "//:thirdparty/patches/boost-master.patch",
    ],
    # It is recommended to edit the above URL and the below sha256 to point to a specific version of this repository.
    integrity = "sha256-QWIfY+JPQ4SVXucnHEPtbB8Ar7hGStem2zHjL094q0o=",
)
non_module_boost_repositories = use_extension("@com_github_nelhage_rules_boost//:boost/repositories.bzl", "non_module_dependencies")
use_repo(
    non_module_boost_repositories,
    "boost",
)

bazel_dep(name="rules_python", version="1.4.0")
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = True,
    # Only set when you have multiple toolchain versions.
    is_default = True,
    python_version = "3.9.13",
)
use_repo(python, "python_3_9_13", "python_3_9_13_host")
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    hub_name = "py_deps_buildkite",
    # We need to use the same version here as in the `python.toolchain` call.
    python_version = "3.9.13",
    requirements_lock = "//:release/requirements_buildkite.txt",
)
use_repo(pip, "py_deps_buildkite")
register_toolchains("//:python_toolchain")

http_archive = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")

#http_archive(
#    name = "com_github_redis_hiredis",
#    build_file = "//:bazel/hiredis.BUILD",
#    url = "https://github.com/redis/hiredis/archive/refs/tags/v1.3.0.tar.gz",
#    integrity = "sha256-Jc7kUA81nPXK07Ue1iBZqt/Ak5sFFQwfGcfigpEjYxw=",
#    #patches = [
#    #    "//:thirdparty/patches/hiredis-windows-msvc.1.3.0.patch",
#    #],
#)

http_archive(
    name = "cython",
    build_file = "//:bazel/cython.BUILD",
    url = "https://github.com/cython/cython/archive/refs/tags/3.1.0.tar.gz",
)

http_archive(
    name = "nlohmann_json",
    build_file = "//:bazel/nlohmann_json.BUILD",
    strip_prefix = "json-3.12.0",
    integrity = "sha256-S5LrDAbRBoP3RHzpQGy5fNS0U74Y1yeTIPey8CXBAYc=",
    url = "https://github.com/nlohmann/json/archive/v3.12.0.tar.gz",
)

# probably not needed for ios
http_archive(
    name = "com_github_antirez_redis",
    build_file = "//:bazel/redis.BUILD",
    url = "https://github.com/redis/redis/archive/refs/tags/8.0.0.tar.gz",
    #patches = [
    #    "//:thirdparty/patches/redis-quiet.patch",
    #],
    #patch_args = ["-p1"],
    workspace_file_content = 'workspace(name = "com_github_antirez_redis")',
)

http_archive(
    name = "crane_linux_x86_64",
    build_file_content = """
filegroup(
    name = "file",
    srcs = glob(
        ["**"],
        allow_empty = True,
    ),
    visibility = ["//visibility:public"],
)
""",
    url = "https://github.com/google/go-containerregistry/releases/download/v0.20.3/go-containerregistry_Linux_x86_64.tar.gz",
)
